// Generated by CoffeeScript 1.9.2
(function() {
  var BattleLayer2, location, root,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  BattleLayer2 = cc.Layer.extend({
    wait: function(t) {
      var that;
      that = this;
      return this.scheduleOnce(function() {
        return that.isWaitCmd--;
      }, t, this.isWaitCmd + 'wait' + t);
    },
    evn_delay: function(t) {
      return this.wait(t);
    },
    evn_start: function() {
      var arg;
      arg = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      console.log("battleLayer2.coffee defaultAction (#201): " + 'default start Action');
      return this.wait(1);
    },
    evn_log: function() {
      var arg;
      arg = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      console.log('log:' + arg);
      return this.wait(2);
    },
    evn_open: function(n, m) {
      var temp;
      console.log('open' + n + m);
      temp = gs.battleArray[n * 3 + m];
      temp.testBallAction(temp.getPosition());
      return this.wait(0.5);
    },
    evn_attack: function(n) {
      var temp;
      temp = gs.battleArray[n];
      temp.attack();
      return this.wait(3);
    },
    evn_showDamage: function(n) {
      var temp;
      temp = gs.battleArray[n];
      this.showDamage(temp.getPosition(), 999);
      return this.wait(0.5);
    },
    evn_evolute: function(n, id) {
      var temp;
      temp = gs.battleArray[n];
      temp.evolute(id);
      return this.wait(0.5);
    },
    evn_changeLook: function(n, m) {
      var aim, source;
      source = gs.battleArray[n];
      aim = gs.battleArray[m];
      return source.changeLook(aim);
    },
    evn_showSkill: function(pokemon, skill) {
      console.log("battleLayer2.coffee evn_showSkill (#30): " + 'show some skill');
      return this.wait(0.5);
    },
    evn_whenCall: function(pokemon, player, x, y) {
      var card, loc;
      console.log("battleLayer2.coffee evn_whenCall (#45): " + 'whenCall log');
      card = pokemon.pl;
      loc = location(y, x);
      card.callCard(loc);
      return this.wait(0.5);
    },
    evn_whenRegain: function(pokemon, player, x, y) {
      console.log("battleLayer2.coffee evn_whenRegain (#33): " + 'when ragain' + x + y);
      console.log(location(x));
      return this.wait(0.5);
    },
    evn_lightning: function(n, m) {
      var loc, temp;
      if (m != null) {
        this.evn_lightningStrike(n, m);
        return;
      }
      temp = gs.battleArray[n];
      loc = temp.getPosition();
      temp.particleDot(res.lightning_plist, loc);
      return this.wait(0.1);
    },
    evn_lightningStrike: function(n, m) {
      var aim, source;
      source = gs.battleArray[n];
      aim = gs.battleArray[m];
      source.lightningStrike(source.getPosition(), aim.getPosition(), aim, 10);
      return this.wait(0.15);
    },
    evn_attackEnd: function(n) {
      return this.wait(1);
    },
    cmds: [['open', 0, 1], ['open', 0, 5], ['delay', 1], ['delay', 1], ['delay', 1]],
    pc: 0,
    isWaitCmd: 0,
    isRunCmd: false,
    myEval: function(exp) {
      var i, len, ref, results, t;
      if (exp[0] === 'spawn') {
        ref = exp.slice(1);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          t = ref[i];
          results.push(this.myEval(t));
        }
        return results;
      } else {
        this.isWaitCmd++;
        if (this['evn_' + exp[0]] == null) {
          throw 'no such evn_ function';
        }
        return this['evn_' + exp[0]].apply(this, exp.slice(1));
      }
    },
    kernelUpdate: function() {
      if (this.isWaitCmd > 0) {
        return;
      }
      if (!(this.pc < this.cmds.length)) {
        this.isRunCmd = false;
        return;
      }
      return this.myEval(this.cmds[this.pc++]);
    },
    runCmd: function(cmds) {
      if (cmds.length < 0) {
        throw 'no commands';
      }
      if (this.isWaitCmd > 0 || this.isRunCmd || this.pc < this.cmds.length) {
        console.log('it is not finish');
        return 'isRunning';
      }
      this.cmds = cmds;
      this.pc = 0;
      this.isWaitCmd = 0;
      return this.isRunCmd = true;
    },
    sprite: null,
    ctor: function() {
      var closeItem, eventListener, menu, mouseCheck, size, temp, that;
      this._super();
      that = this;
      this._initBattleTimer();
      this._loadRes();
      this._create6Position();
      this._createTable([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]);
      console.log("To Watch: battleLayer2.coffee (#107):");
      console.log(this.table);
      this.schedule(this.kernelUpdate, 0.05, cc.REPEAT_FOREVER, 0, 'kernelUpdate');
      size = cc.winSize;
      closeItem = new cc.MenuItemImage(res.CloseNormal_png, res.CloseSelected_png, function() {
        return myDirector.battle2();
      }, this);
      closeItem.attr({
        x: size.width - 20,
        y: 20,
        anchorX: 0.5,
        anchorY: 0.5
      });
      menu = new cc.Menu(closeItem);
      menu.x = 0;
      menu.y = 0;
      this.addChild(menu, 1);
      this.getScheduler().setTimeScale(1);
      this.xy = new cc.LabelTTF("单击鼠标扔球", "arial", 16);
      this.addChild(this.xy, 100);
      this.stage = new cc.Sprite(res.stage);
      this.stage.attr({
        x: size.width / 2,
        y: size.height / 2
      });
      this.addPokemon = function(n) {
        var t, temp;
        if (pokemonDataArray[n - 1] != null) {
          t = pokemonDataArray[n - 1];
        } else {
          t = {
            id: n
          };
        }
        temp = new PokemonCard(t, 1);
        that.addChild(temp, 5);
        gs.playerArray.push(temp);
        gs.battleArray.push(temp);
        return temp;
      };
      temp = this.addPokemon(42);
      temp.setVisible(false);
      temp.setPosition(gs.uLoc[0]);
      temp = this.addPokemon(281);
      temp.setPosition(gs.uLoc[1]);
      temp = this.addPokemon(148);
      temp.setVisible(false);
      temp.setPosition(gs.uLoc[2]);
      temp = this.addPokemon(142);
      temp.setVisible(false);
      temp.setPosition(gs.dLoc[0]);
      temp = this.addPokemon(91);
      temp.setVisible(false);
      temp.setPosition(gs.dLoc[2]);
      temp = this.addPokemon(123);
      temp.setPosition(gs.dLoc[1]);
      this.particle = new cc.ParticleSystem("res/particles_effect/attack_fire.plist");
      gs(this.particle).bindTimer(true);
      this.particle.stopSystem();
      this.addChild(this.particle, 10);
      mouseCheck = cc.EventListener.create({
        event: cc.EventListener.MOUSE,
        onMouseMove: function(event) {
          var p, x, y;
          p = event.getLocation();
          x = p.x | 0;
          y = p.y | 0;
          that.xy.setString("");
          that.xy.x = p.x;
          return that.xy.y = p.y;
        }
      });
      cc.eventManager.addListener(mouseCheck, this);
      eventListener = cc.EventListener.create({
        event: cc.EventListener.TOUCH_ONE_BY_ONE,
        onTouchBegan: function(event) {
          var grid, touchPoint;
          touchPoint = event.getLocation();
          that.particle.setPosition(touchPoint);
          temp = gs.playerArray[0];
          gs.playerArray = gs.playerArray.slice(1);
          grid = gs.getNearestGrid(touchPoint);
          gs.battleArray[1].testSkillLook('z');
          return console.log(grid);
        }
      });
      cc.eventManager.addListener(eventListener, this);
      this.schedule(function() {
        var r, rect1, rect2;
        rect1 = that.stage.getBoundingBox();
        rect2 = that.particle.getBoundingBox();
        r = cc.rectIntersection(rect1, rect2);
        if (r.width === 0 && r.height === 0) {
          return;
        }
        console.log("To Watch: battleLayer.coffee (#123):");
        return console.log(r);
      }, 0.02);
      return true;
    },
    _createTable: function(atkIds, defIds) {
      var atkList, defList, t;
      atkList = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = atkIds.length; i < len; i++) {
          t = atkIds[i];
          results.push(this._createCard(t, 1));
        }
        return results;
      }).call(this);
      defList = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = defIds.length; i < len; i++) {
          t = defIds[i];
          results.push(this._createCard(t, 0));
        }
        return results;
      }).call(this);
      return this.table = new Table(atkList, defList);
    },
    _createCard: function(id, flag) {
      var tCard, tData;
      tData = pokemonDataArray[id - 1] || pokemonDataArray[151];
      tCard = new PokemonCard(tData, 1);
      this.addChild(tCard, 5);
      if (flag === 0) {
        tCard.setPosition(gs.uhLoc);
      } else {
        tCard.setPosition(gs.dhLoc);
      }
      return new CardMode(tData, tCard);
    },
    _initBattleTimer: function() {
      var defaultSchedule;
      gs.battleLayer = this;
      defaultSchedule = cc.director.getScheduler();
      this._scheduler = new cc.Scheduler();
      defaultSchedule.scheduleUpdate(this._scheduler, 0, false);
      this._actionManager = new cc.ActionManager();
      return this._scheduler.scheduleUpdate(this._actionManager, 0, false);
    },
    _loadRes: function() {
      cc.spriteFrameCache.addSpriteFrames(res.res_plist);
      return cc.textureCache.addImage(res.res_png);
    },
    _create6Position: function() {
      var height, r, size, width;
      size = cc.winSize;
      width = size.width;
      height = size.height;
      r = 0.414;
      gs.uLoc = [cc.p(-0.5 * width * r + width / 2, 0.5 * height * r + height / 2), cc.p(width / 2, 0.5 * height * r + height / 2), cc.p(0.5 * width * r + width / 2, 0.5 * height * r + height / 2)];
      gs.dLoc = [cc.p(-0.5 * width * r + width / 2, -0.5 * height * r + height / 2), cc.p(width / 2, -0.5 * height * r + height / 2), cc.p(0.5 * width * r + width / 2, -0.5 * height * r + height / 2)];
      gs.uhLoc = cc.p(width / 2, height + 100);
      return gs.dhLoc = cc.p(width / 2, -100);
    },
    showDamage: function(loc, n, size) {
      var label, that;
      that = this;
      label = new cc.LabelTTF(n.toString(), "Arial", 40);
      if (size != null) {
        label.setFontSize(size);
      }
      label.setPosition(loc);
      label.setColor(cc.color(255, 240, 0));
      this.addChild(label, 100);
      return label.runAction(cc.sequence(cc.spawn(cc.moveBy(0.5, 0, 70).easing(cc.easeSineOut()), cc.scaleTo(0.5, 1.3).easing(cc.easeElasticIn())), cc.callFunc(function() {
        return that.removeChild(label, true);
      })));
    }
  });

  location = function(row, column) {
    var t;
    if (column != null) {
      if (!(indexOf.call([0, 1, 2], row) >= 0 && indexOf.call([0, 1, 2], column) >= 0)) {
        throw 'ERROR: location out of boundary';
      }
      t = null;
      if (row === 0) {
        t = gs.uLoc;
      } else {
        t = gs.dLoc;
      }
      return t[column];
    } else {
      if (row !== 0 && row !== 1) {
        throw 'ERROR: location out of boundary';
      }
      t = (row === 0 ? gs.uhLoc : gs.dhLoc);
      return t;
    }
  };

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.BattleLayer2 = BattleLayer2;

}).call(this);

//# sourceMappingURL=battleLayer2.js.map
