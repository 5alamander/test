// Generated by CoffeeScript 1.9.2
(function() {
  var Ball, ElementColor, PokemonCard, Skill, feiyekuaidao, root;

  ElementColor = {
    '冰': res.back_bin,
    '草': res.back_cao,
    '超能': res.back_chao,
    '虫': res.back_chong,
    '地面': res.back_di,
    '电': res.back_dian,
    '格斗': res.back_dou,
    '毒': res.back_du,
    '恶': res.back_e,
    '飞行': res.back_fei,
    '钢': res.back_gang,
    '鬼': res.back_gui,
    '火': res.back_huo,
    '龙': res.back_long,
    '普通': res.back_pu,
    '水': res.back_shui,
    '岩': res.back_yan,
    '妖': res.back_yao
  };

  Skill = (function() {
    function Skill(node) {
      this.node = node;
      this.prev = new cc.ParticleSystem("res/particles_effect/sun_ray_prev.plist");
      this.prev.stopSystem();
      this.prev.setPosition(0, 0);
      this.ray = new cc.ParticleSystem("res/particles_effect/ray/sun_ray.plist");
      this.ray.stopSystem();
      this.ray.setPosition(0, 0);
      this.node.addChild(this.prev, 10);
      this.node.addChild(this.ray, 10);
      this.prev.setPositionType(cc.ParticleSystem.TYPE_GROUPED);
      this.ray.setPositionType(cc.ParticleSystem.TYPE_GROUPED);
      gs(this.prev).bindTimer(true);
      gs(this.ray).bindTimer(true);
    }

    Skill.prototype.prepaire = function() {
      return this.prev.resetSystem();
    };

    Skill.prototype.start = function() {
      this.prev.stopSystem();
      return this.ray.resetSystem();
    };

    return Skill;

  })();

  feiyekuaidao = (function() {
    function feiyekuaidao(node) {
      this.node = node;
      this.decrate = new cc.ParticleSystem("res/particles_effect/grass_decorate.plist");
    }

    return feiyekuaidao;

  })();

  Ball = cc.Node.extend({
    ballUp: null,
    ballDown: null,
    particle: null,
    ctor: function() {
      this._super();
      this.ballUp = new cc.Sprite("#ball/ballup.png");
      this.ballDown = new cc.Sprite("#ball/balldown.png");
      this.ballUp.setScale(0.9);
      this.ballDown.setScale(0.9);
      this.setScale(0.25);
      this.addChild(this.ballUp, 5);
      this.addChild(this.ballDown, 4);
      gs(this).bindTimer();
      gs(this.ballUp).bindTimer();
      return gs(this.ballDown).bindTimer();
    },
    _closeAndShow: function() {
      this.ballUp.attr({
        y: 0,
        opacity: 255
      });
      this.ballDown.attr({
        y: 0,
        opacity: 255
      });
      return this.setScale(0.25);
    },
    _openAndHid: function() {
      this.ballUp.attr({
        y: 100,
        opacity: 0
      });
      this.ballDown.attr({
        y: -100,
        opacity: 0
      });
      return this.setScale(1);
    },
    open: function(cag) {
      var bothAction, moveDown, moveUp, that;
      that = this;
      moveUp = cc.moveBy(0.5, 0, 100).easing(cc.easeExponentialOut());
      moveDown = cc.moveBy(0.5, 0, -100).easing(cc.easeExponentialOut());
      bothAction = cc.spawn(cc.rotateBy(0.5, 720), cc.scaleTo(0.5, 1));
      this.runAction(bothAction);
      this.ballUp.runAction(moveUp);
      this.ballUp.runAction(cc.fadeOut(0.5));
      this.ballDown.runAction(moveDown);
      return this.ballDown.runAction(cc.fadeOut(0.5));
    },
    close: function(cag) {
      var bothAction, moveDown, moveUp;
      moveUp = cc.moveBy(0.5, 0, 100).easing(cc.easeExponentialIn());
      moveDown = cc.moveBy(0.5, 0, -100).easing(cc.easeExponentialIn());
      bothAction = cc.spawn(cc.rotateBy(0.5, 720), cc.scaleTo(0.5, 0.25));
      this.runAction(bothAction);
      this.ballUp.runAction(moveDown);
      this.ballUp.runAction(cc.fadeIn(0.5));
      this.ballDown.runAction(moveUp);
      return this.ballDown.runAction(cc.fadeIn(0.5));
    }
  });

  PokemonCard = cc.Sprite.extend({
    wd2: 0,
    hd2: 0,
    backImage: null,
    frontImage: null,
    pokemonImage: null,
    ballUp: null,
    ballDown: null,
    ball: null,
    _isMirror: false,
    _isInBall: false,
    _isBack: false,
    _isActing: false,
    uid: 0,
    tags: [],
    _isTempUse: 0,
    ctor: function(pd, ed, _isMirror, _isBack) {
      var backColor, e1, e2;
      this.pd = pd;
      this.ed = ed;
      this._isMirror = _isMirror != null ? _isMirror : false;
      this._isBack = _isBack != null ? _isBack : false;
      this._super();
      this.setAnchorPoint(0.5, 0.5);
      e1 = this.pd.e1;
      e2 = this.pd.e2;
      if (this.pd.e1 == null) {
        this.frontImage = new cc.Sprite(res.back_huo);
        this.backImage = new cc.Sprite(res.back_yao);
        if (this.pd.id === 291) {
          this.frontImage = new cc.Sprite(res.back_chong);
        }
        if (this.pd.id === 281) {
          this.frontImage = new cc.Sprite(res.back_chao);
        }
      } else {
        this.frontImage = new cc.Sprite(ElementColor[e1]);
        backColor = e2 !== '' ? ElementColor[e2] : ElementColor[e1];
        this.backImage = new cc.Sprite(backColor);
      }
      this.pokemonImage = new cc.Sprite(gs.getPicture(this.pd.id));
      this.ball = new Ball();
      this.addChild(this.ball, 5);
      this._initCardLook();
      this._initCardAction();
      this._putInBall();
      return this.setPosition(gs.dhLoc);
    },
    _initCardLook: function() {
      this.addChild(this.backImage, 0);
      this.addChild(this.frontImage, 1);
      this.addChild(this.pokemonImage, 2);
      gs(this).bindTimer();
      gs(this.backImage).bindTimer();
      gs(this.frontImage).bindTimer();
      gs(this.pokemonImage).bindTimer();
      this.backScale = 0.5;
      this.backImage.setScale(this.backScale);
      this.frontImage.setScale(this.backScale);
      this.pokemonImage.setScale(0.8);
      this.wd2 = this.frontImage.width;
      return this.hd2 = this.frontImage.height;
    },
    _initCardAction: function() {
      var that;
      that = this;
      return this.flipCardAction = function() {
        return cc.spawn(cc.scaleBy(0.5, -1, 1).easing(cc.easeCircleActionInOut(0.5)), cc.sequence(cc.skewBy(0.25, 10, 30), cc.callFunc(function() {
          if (that._isBack !== true) {
            that.frontImage.runAction(cc.fadeOut(0));
            return that._isBack = true;
          } else {
            that.frontImage.runAction(cc.fadeIn(0));
            return that._isBack = false;
          }
        }), cc.skewBy(0.25, -10, -30)));
      };
    },
    _getBoundingBox: function() {
      var p, rect;
      p = this.getPosition();
      rect = cc.rect(-this.wd2 + p.x, -this.hd2 + p.y, this.wd2 + p.x, this.hd2 + p.y);
      return rect;
    },
    flipCard: function() {
      if (!(this.getNumberOfRunningActions() > 0)) {
        return this.runAction(this.flipCardAction());
      }
    },
    _putInBall: function() {
      this._isInBall = true;
      this.ball._closeAndShow();
      this.backImage.attr({
        opacity: 0,
        scale: 0.1
      });
      this.frontImage.attr({
        opacity: 0,
        scale: 0.1
      });
      return this.pokemonImage.attr({
        opacity: 0,
        scale: 0.1
      });
    },
    _putOutsideBall: function() {
      this._isInBall = false;
      this.ball._openAndHid();
      this.backImage.attr({
        opacity: 255,
        scale: this.backScale
      });
      if (!this._isBack) {
        this.frontImage.attr({
          opacity: 255,
          scale: this.backScale
        });
      }
      return this.pokemonImage.attr({
        opacity: 255,
        scale: 0.8
      });
    },
    callCard: function(loc) {
      var createWeb, openAction, ref, ref1, ref2, skill, step2, that;
      that = this;
      this._isActing = true;
      this._putInBall();
      openAction = function(scaleTo) {
        return cc.spawn(cc.fadeIn(0.5), cc.scaleTo(0.5, scaleTo).easing(cc.easeElasticOut()));
      };
      step2 = function() {
        that.backImage.runAction(openAction(that.backScale));
        that.frontImage.runAction(openAction(that.backScale));
        that.pokemonImage.runAction(openAction(0.8));
        that.ball.open(10);
        that._isInBall = false;
        return this.runAction(cc.sequence(cc.delayTime(0.5), cc.callFunc(function() {
          var ref, ref1;
          that._isActing = false;
          if (((ref = that.pd) != null ? ref.id : void 0) === "15") {
            that.attack();
          }
          if (((ref1 = that.pd) != null ? ref1.id : void 0) === "5") {
            return that.pussle(1.5);
          }
        })));
      };
      this.runAction(cc.sequence(cc.spawn(cc.jumpTo(0.5, loc, 100, 1).easing(cc.easeSineInOut()), cc.rotateBy(0.5, 720)), cc.callFunc(step2, this)));
      if (((ref = this.pd) != null ? ref.id : void 0) === '17') {
        this.scheduleOnce(function() {
          return that.flipCard();
        }, 2.5);
      }
      if (((ref1 = that.pd) != null ? ref1.id : void 0) === '93') {
        this.scheduleOnce(function() {
          return that.attack();
        }, 1.5);
      }
      if (((ref2 = that.pd) != null ? ref2.id : void 0) === '6') {
        this.scheduleOnce(function() {
          return that.attack(0, 0, 1);
        }, 2);
      }
      skill = new Skill(this);
      if (this.pd.id === "1") {
        this.scheduleOnce(function() {
          return skill.prepaire();
        }, 1.5);
      }
      if (this.pd.id === "1") {
        this.scheduleOnce(function() {
          return skill.start();
        }, 2.6);
      }
      if (this.pd.id === 251) {
        this.scheduleOnce(function() {
          gs.battleLayer.getScheduler().setTimeScale(3);
          return console.log("pokemonCard.coffee  (#242): " + "set time");
        }, 1.5);
      }
      return createWeb = function(aim, t) {
        var web;
        if (t == null) {
          t = 0.6;
        }
        web = new cc.Sprite("res/temp/spiderweb.png");
        web.setPosition(that.getPosition());
        web.setScale(0.1);
        gs.battleLayer.addChild(web, 100);
        loc = (aim != null ? aim : gs.getNearest(that).getPosition());
        web.runAction(cc.sequence(cc.spawn(cc.scaleTo(t, 2), cc.rotateBy(t, 80), cc.moveTo(t, loc)), cc.delayTime(2), cc.fadeOut(1), cc.callFunc(function() {
          return gs.battleLayer.removeChild(web, true);
        })));
        gs._tempUseWeb = web;
        return gs._tempUseP = that;
      };
    },
    attack: function(x, y, type) {
      var act, aim, dx, dy, loc, myLoc, that;
      that = this;
      aim = gs.battleArray[1];
      loc = aim.getPosition();
      dx = (loc.x - this.x) * 0.8;
      dy = (loc.y - this.y) * 0.8;
      myLoc = {
        x: this.x,
        y: this.y
      };
      act = cc.sequence(cc.moveBy(0.6, dx, dy).easing(cc.easeBackIn()), cc.callFunc(function() {
        var claw, p, path, point, rect;
        rect = cc.rectIntersection(that.getBoundingBox(), aim.getBoundingBox());
        point = cc.p(cc.rectGetMidX(rect), cc.rectGetMidY(rect));
        aim.beHit(point);
        p = new cc.ParticleSystem("res/particles_effect/attack_fire.plist");
        p.setPosition(point);
        gs.battleLayer.showDamage(point, 400);
        gs.battleLayer.addChild(p, 50);
        path = (type != null ? 'claw2.png' : 'claw1.png');
        claw = new cc.Sprite('res/temp/' + path);
        claw.setPosition(point);
        if (type != null) {
          claw.setScale(4, 1.5);
          gs.battleLayer.showDamage(gs.uLoc[0], 100);
          gs.battleArray[0].beHit(point);
          gs.battleArray[2].beHit(point);
          gs.battleLayer.showDamage(gs.uLoc[2], 100);
        } else {
          claw.setScale(1.5, 2);
        }
        claw.runAction(cc.sequence(cc.delayTime(0.2), cc.fadeOut(0.4), cc.callFunc(function() {
          return gs.battleLayer.removeChild(claw, true);
        })));
        return gs.battleLayer.addChild(claw, 49);
      }), cc.moveTo(1.5, myLoc).easing(cc.easeSineIn()));
      return this.runAction(act);
    },
    beHit: function(p, distance) {
      var dx, dy, that, v, x, y;
      if (distance == null) {
        distance = 30;
      }
      that = this;
      x = this.x, y = this.y;
      dx = x - p.x;
      dy = y - p.y;
      v = cc.pNormalize(cc.p(dx, dy));
      v = cc.pMult(v, distance);
      return this.runAction(cc.sequence(cc.moveBy(0.5, v).easing(cc.easeElasticOut()), cc.callFunc(function() {}), cc.moveBy(1, cc.pMult(v, -1)).easing(cc.easeSineInOut())));
    },
    regainCard: function(loc) {
      var closeAction, that;
      that = this;
      this._isActing = true;
      this._putOutsideBall();
      closeAction = function(scaleTo) {
        return cc.spawn(cc.fadeOut(1), cc.scaleTo(0.5, scaleTo).easing(cc.easeElasticIn()));
      };
      this.backImage.runAction(closeAction(0.1));
      this.frontImage.runAction(closeAction(0.1));
      this.pokemonImage.runAction(closeAction(0.1));
      this.ball.close(10);
      return this.runAction(cc.sequence(cc.delayTime(0.5), cc.callFunc(function() {
        return that._isInBall = true;
      }), cc.spawn(cc.jumpTo(0.5, gs.dhLoc, 100, 1).easing(cc.easeSineInOut()), cc.rotateBy(0.5, 720)), cc.callFunc(function() {
        that._isActing = false;
        return gs.playerArray.push(that);
      })));
    },
    update: function(dt) {
      return cc.log('I am awake : ' + dt);
    },
    testBallAction: function(loc) {
      if (this.issmall == null) {
        this.issmall = true;
      }
      if (!this._isActing) {
        return this.callCard(loc);
      }
    },
    evolute: function(id) {
      var aimPicture, scaleBack, that;
      aimPicture = null;
      if (typeof id === 'number') {
        aimPicture = gs.getPicture(id);
      } else {
        aimPicture = 'res/pokemons/image151.png';
      }
      that = this;
      scaleBack = function() {
        that.backImage.runAction(cc.scaleTo(0.5, that.backScale));
        return that.frontImage.runAction(cc.scaleTo(0.5, that.backScale));
      };
      this.pussle(1, aimPicture);
      return this.runAction(cc.spawn(cc.sequence(cc.delayTime(0.75), cc.callFunc(function() {
        return that.pokemonImage.setTexture(aimPicture);
      })), cc.sequence(cc.delayTime(0.5), cc.callFunc(function() {
        return that.pussle(1, aimPicture);
      }), cc.callFunc(function() {
        var p;
        scaleBack();
        p = new cc.ParticleSystem("res/particles_effect/a.plist");
        p.setStartColor(cc.color(10, 186, 40));
        p.setEndColor(cc.color(40, 186, 40));
        p.setPosition(that.getPosition());
        return gs.battleLayer.addChild(p, 120);
      }), this.flipCardAction())));
    },
    changeLook: function(aim) {
      var backImage, frontImage, pokemonImage, scaleBack, that;
      that = this;
      pokemonImage = aim.pokemonImage.getTexture();
      frontImage = aim.frontImage.getTexture();
      backImage = aim.backImage.getTexture();
      scaleBack = function() {
        that.backImage.runAction(cc.scaleTo(0.5, that.backScale));
        return that.frontImage.runAction(cc.scaleTo(0.5, that.backScale));
      };
      return this.runAction(cc.spawn(cc.sequence(cc.delayTime(0.75), cc.callFunc(function() {
        that.pokemonImage.setTexture(pokemonImage);
        that.pokemonImage.setFlippedX(true);
        that.frontImage.setTexture(frontImage);
        return that.backImage.setTexture(backImage);
      })), cc.sequence(cc.delayTime(0.5), cc.callFunc(function() {
        that.backScale = aim.backScale;
        return scaleBack();
      }), this.flipCardAction())));
    },
    pussle: function(t, res) {
      var image;
      if (t == null) {
        t = 0.5;
      }
      if (res == null) {
        res = 'res/pokemons/image006.png';
      }
      image = new cc.Sprite(res);
      image.setPosition(this.getPosition());
      image.setScale(this.getScale());
      gs.battleLayer.addChild(image, 100);
      return image.runAction(cc.sequence(cc.spawn(cc.scaleTo(t, 2).easing(cc.easeExponentialOut()), cc.fadeOut(t)), cc.callFunc(function() {
        return gs.battleLayer.removeChild(image, true);
      })));
    },
    crossBoom: function(loc, scale, type) {
      var boom, boomAnim, s;
      if (scale == null) {
        scale = 1;
      }
      if (type == null) {
        type = 0;
      }
      boom = gs.spliteFrame('res/temp/cross.png', 4, 5);
      boomAnim = new cc.Animation(boom[0].concat(boom[1]).concat(boom[2]).concat(boom[3]), 0.8 / 20, 1);
      s = new cc.Sprite();
      gs.battleLayer.addChild(s, 200);
      s.attr({
        x: loc.x,
        y: loc.y,
        scale: scale
      });
      return s.runAction(cc.sequence(cc.animate(boomAnim), cc.delayTime(0.5), cc.callFunc(function() {
        return gs.battleLayer.removeChild(s, true);
      })));
    },
    lightningStrike: function(from, aim, beHitCard, hitPower, type) {
      var d, lightningAnim, lightningFrames, ls, r, rd, rd0, that;
      if (type == null) {
        type = 0;
      }
      that = this;
      r = -90 - cc.pToAngle(cc.pSub(aim, from)) * 180 / Math.PI;
      d = cc.pDistance(aim, from);
      rd = Math.random();
      rd0 = Math.random();
      console.log(r);
      lightningFrames = gs.spliteFrame('res/Lightning.png', 1, 6);
      lightningAnim = new cc.Animation(lightningFrames[0], 0.4 / 6, 1);
      ls = new cc.Sprite();
      gs.battleLayer.addChild(ls, 200);
      ls.attr({
        x: from.x,
        y: from.y,
        scaleX: 2 + rd * 3,
        scaleY: 0
      });
      ls.setAnchorPoint(0.5, 1);
      ls.setRotation(r);
      return ls.runAction(cc.sequence(cc.spawn(cc.scaleTo(0.1 + rd0 * 0.3, 1 + rd * 2, d / 512).easing(cc.easeBounceOut()), cc.animate(lightningAnim), cc.sequence(cc.delayTime(0.1), cc.callFunc(function() {
        if (beHitCard != null) {
          beHitCard.beHit(from, hitPower);
        }
        return that.particleDot(res.lightning_plist, aim);
      }))), cc.callFunc(function() {
        ls.stopAllActions();
        return gs.battleLayer.removeChild(ls, true);
      })));
    },
    slipCard: function() {
      var create, i, len, n, ref, results, tdx, that, xoffset;
      that = this;
      xoffset = this.frontImage.width;
      create = function(dx) {
        var image;
        image = new cc.Sprite("res/pokemons/image008.png");
        image.setPosition(that.getPosition());
        image.setScale(that.pokemonImage.getScale());
        gs.battleLayer.addChild(image, 100);
        return image.runAction(cc.sequence(cc.spawn(cc.moveBy(1.5, dx, 0).easing(cc.easeElasticInOut()), cc.blink(1.5, 4).easing(cc.easeSineOut())), cc.fadeOut(0.8), cc.callFunc(function() {
          return gs.battleLayer.removeChild(image, true);
        })));
      };
      tdx = xoffset * 0.7;
      ref = [-3, -2, -1, 1, 2, 3];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        n = ref[i];
        results.push(create(tdx * n));
      }
      return results;
    },
    particleDot: function(res, loc, type) {
      var p;
      if (type == null) {
        type = 0;
      }
      p = new cc.ParticleSystem(res);
      p.setPosition(loc || this.getPosition());
      gs.battleLayer.addChild(p, 210);
      return this.scheduleOnce(function() {
        return gs.battleLayer.removeChild(p, true);
      }, p.life + 0.2);
    },
    shrink: function(res, option) {
      var action, cb, ease, last, loc, rotate, s, scale, scaleTo, t;
      if (option == null) {
        option = {};
      }
      s = new cc.Sprite(res);
      loc = option.loc, scale = option.scale, scaleTo = option.scaleTo, rotate = option.rotate, ease = option.ease, t = option.t, last = option.last, cb = option.cb;
      s.setPosition(loc || this.getPosition());
      s.setScale(scale || 1);
      gs.battleLayer.addChild(s, 200);
      action = cc.spawn(cc.scaleTo(t || 0.5, scaleTo || 0.1), cc.rotateBy(t || 0.5, rotate || 0));
      if (ease != null) {
        action.easing(ease);
      }
      return s.runAction(cc.sequence(action, cc.callFunc(function() {
        return typeof cb === "function" ? cb() : void 0;
      }), cc.delayTime(last || 0), cc.callFunc(function() {
        return gs.battleLayer.removeChild(s, true);
      })));
    },
    wave: function(res, option) {
      var cb, loc, rotate, s, scale;
      if (option == null) {
        option = {};
      }
      s = new cc.Sprite(res);
      loc = option.loc, scale = option.scale, rotate = option.rotate, cb = option.cb;
      s.setPosition(loc || this.getPosition());
      s.setScale(0.1);
      gs.battleLayer.addChild(s, 200);
      return s.runAction(cc.sequence(cc.spawn(cc.scaleTo(0.5, scale || 1), cc.rotateBy(0.5, rotate || 0), cc.fadeOut(0.5)).easing(cc.easeBounceIn()), cc.callFunc(function() {
        gs.battleLayer.removeChild(s, true);
        return typeof cb === "function" ? cb() : void 0;
      })));
    },
    whip: function(res, option) {
      var aim, cb, loc, rotate, rotateBy, s, scale, that;
      if (option == null) {
        option = {};
      }
      s = new cc.Sprite(res);
      loc = option.loc, aim = option.aim, scale = option.scale, rotate = option.rotate, rotateBy = option.rotateBy, cb = option.cb;
      that = this;
      s.setPosition(loc || this.getPosition());
      s.setScale((scale || 1) * 2);
      s.setRotation(rotate || 0);
      gs.battleLayer.addChild(s, 200);
      return s.runAction(cc.sequence(cc.spawn(cc.rotateBy(0.5, rotateBy || 0).easing(cc.easeSineInOut()), cc.scaleTo(0.5, scale || 1), cc.sequence(cc.moveTo(0.25, aim || this.getPosition()), cc.callFunc(function() {
        that.beHit(loc, 20);
        return that.particleDot("res/particles_effect/attack_fire.plist", aim || that.getPosition());
      }), cc.moveTo(0.25, loc || this.getPosition())).easing(cc.easeExponentialInOut())), cc.callFunc(function() {
        gs.battleLayer.removeChild(s, true);
        return typeof cb === "function" ? cb() : void 0;
      })));
    },
    luster: function(cb) {
      var clipper, luster, stencil, that;
      that = this;
      stencil = new cc.Sprite(res.back_bin);
      stencil.setScale(0.5);
      clipper = new cc.ClippingNode(stencil);
      clipper.setInverted(false);
      clipper.setAlphaThreshold(0);
      luster = new cc.Sprite('res/temp/luster.png');
      this.addChild(clipper, 1);
      clipper.addChild(luster);
      luster.attr({
        y: -45,
        scale: 1.6
      });
      return luster.runAction(cc.sequence(cc.moveBy(0.4, 0, 100), cc.moveTo(0, 0, -45), cc.moveBy(0.4, 0, 100), cc.callFunc(function() {
        that.removeChild(clipper, true);
        return typeof cb === "function" ? cb() : void 0;
      })));
    },
    shield: function(cb) {
      var clipper, luster, stencil, that;
      that = this;
      stencil = new cc.Sprite('res/temp/shieldMask.png');
      stencil.setScale(0.5);
      clipper = new cc.ClippingNode(stencil);
      clipper.setInverted(false);
      clipper.setAlphaThreshold(0);
      luster = new cc.Sprite('res/temp/luster.png');
      this.addChild(clipper, 201);
      clipper.addChild(luster);
      luster.attr({
        y: -45,
        scale: 2.3
      });
      return luster.runAction(cc.sequence(cc.moveBy(0.4, 0, 125), cc.moveTo(0, 0, -45), cc.moveBy(0.4, 0, 125), cc.callFunc(function() {
        that.removeChild(clipper, true);
        return typeof cb === "function" ? cb() : void 0;
      })));
    },
    buffWave: function(path, option) {
      var buffWave0, buffWave1, cb, clipper, stencil, that;
      if (option == null) {
        option = {};
      }
      that = this;
      cb = option.cb;
      stencil = new cc.Sprite(res.back_bin);
      stencil.setScale(0.5);
      clipper = new cc.ClippingNode(stencil);
      clipper.setInverted(false);
      clipper.setAlphaThreshold(0);
      buffWave0 = new cc.Sprite(path || 'res/temp/buff_atk.png');
      buffWave1 = new cc.Sprite(path || 'res/temp/buff_atk.png');
      this.addChild(clipper, 2);
      clipper.addChild(buffWave0);
      clipper.addChild(buffWave1);
      buffWave0.attr({
        opacity: 135
      });
      buffWave1.attr({
        y: -200,
        opacity: 135
      });
      buffWave0.runAction(cc.moveBy(0.7, 0, 100));
      return buffWave1.runAction(cc.sequence(cc.moveBy(0.7, 0, 100), cc.callFunc(function() {
        that.removeChild(clipper, true);
        return typeof cb === "function" ? cb() : void 0;
      })));
    },
    rage: function(cb) {
      var rage0, rage1, showAction, that;
      that = this;
      rage0 = new cc.Sprite('res/temp/rage.png');
      rage1 = new cc.Sprite('res/temp/rage.png');
      this.addChild(rage0, 10);
      this.addChild(rage1, 10);
      rage0.attr({
        opacity: 0,
        scale: 2,
        x: 20,
        y: 40
      });
      rage1.attr({
        opacity: 0,
        scale: 1.5,
        x: 40,
        y: 10
      });
      showAction = cc.sequence(cc.fadeIn(0.1), cc.scaleBy(0.5, -0.5).easing(cc.easeElasticInOut()), cc.fadeOut(0.1));
      rage0.runAction(showAction);
      return rage1.runAction(cc.sequence(cc.delayTime(0.3), showAction.clone(), cc.callFunc(function() {
        that.removeChild(rage0, true);
        that.removeChild(rage1, true);
        return typeof cb === "function" ? cb() : void 0;
      })));
    },
    removeAction: function(that, childs) {
      return cc.callFunc(function() {
        var c, i, len, results;
        results = [];
        for (i = 0, len = childs.length; i < len; i++) {
          c = childs[i];
          results.push(that.removeChild(c, true));
        }
        return results;
      });
    },
    growOut: function(res, option) {
      var action, cb, directoin, ease, hitCb, loc, rotate, s, scale;
      s = new cc.Sprite(res);
      loc = option.loc, directoin = option.directoin, scale = option.scale, rotate = option.rotate, ease = option.ease, hitCb = option.hitCb, cb = option.cb;
      s.setPosition(loc || cc.p(0, 0));
      s.attr({
        y: -26,
        scaleY: 0.5
      });
      this.addChild(s, 205);
      action = cc.spawn(cc.scaleTo(0.5, 1, 1), cc.moveBy(0.5, 0, 26), cc.sequence(cc.delayTime(0.22), cc.callFunc(function() {
        return typeof hitCb === "function" ? hitCb() : void 0;
      })));
      if (ease != null) {
        action.easing(ease);
      }
      return s.runAction(cc.sequence(action, this.removeAction(this, [s]), cc.callFunc(function() {
        return typeof cb === "function" ? cb() : void 0;
      })));
    },
    throwOut: function(res, cb) {
      var s;
      s = new cc.Sprite(res);
      this.addChild(s, 200);
      s.setScale(0.2);
      return s.runAction(cc.sequence(cc.spawn(cc.moveTo(0.5, 60, 40).easing(cc.easeSineOut()), cc.scaleTo(0.5, 0.7), cc.fadeIn(0.4), cc.sequence(cc.delayTime(0.2), cc.callFunc(function() {
        return typeof cb === "function" ? cb() : void 0;
      }))), this.removeAction(this, [s])));
    },
    showLog: function(str) {
      var label, that;
      that = this;
      label = new cc.LabelTTF(str, "Arial", 22);
      label.setColor(cc.color(255, 70, 0));
      this.addChild(label, 200);
      return label.runAction(cc.sequence(cc.spawn(cc.moveTo(0.5, 60, 40).easing(cc.easeSineOut()), cc.scaleTo(0.5, 1.4), cc.fadeIn(0.4)), cc.callFunc(function() {
        return that.removeChild(label, true);
      })));
    },
    testSkillLook: function(str) {
      var that;
      that = this;
      switch (str) {
        case 'foot':
          return this.shrink('res/temp/shrink01.png', {
            rotate: 180,
            cb: function() {
              that.shrink('res/temp/foot.png', {
                scale: 4,
                ease: cc.easeBounceOut(),
                scaleTo: 0.5
              });
              that.wave('res/temp/wave01.png', {
                scale: 0.7
              });
              return that.wave('res/temp/wave02.png', {
                scale: 4
              });
            }
          });
        case 'shield':
          return this.shrink('res/temp/shield.png', {
            scale: 0.1,
            scaleTo: 0.62,
            ease: cc.easeElasticOut(),
            cb: function() {
              return that.shield();
            },
            last: 0.9
          });
        case 'growOut':
          return this.growOut('res/temp/thorn.png', {
            ease: cc.easeElasticOut()
          });
        case 'z':
          return this.throwOut('res/temp/Zzz.png', {
            cb: function() {
              return that.throwOut('res/temp/Zzz.png');
            }
          });
        default:
          return console.log('a');
      }
    }
  });

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.PokemonCard = PokemonCard;

}).call(this);

//# sourceMappingURL=pokemonCard.js.map
